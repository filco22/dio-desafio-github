Git

Sistema de Controle de Versões Distribuído.

Estes sistemas de controle possuem a função de registrar quaisquer alterações feitas em cima de um código, armazenando essas informações e permitindo que, caso seja necessário, um(a) programador(a) possa regredir a versões anteriores de uma aplicação de modo simples e rápido.

Vantagens

Economia de tempo e recursos, uma vez que a consulta de diferentes versões de uma mesma aplicação é muito recorrente no trabalho do(a) programador(a).

Outro grande benefício do GIT é justamente o fato de ele ser um sistema distribuído.

Isso significa que, diferentemente de outros sistemas de controle de versionamento populares na época em que foi lançado, o GIT possui repositórios, e não somente um único local com o histórico de seu trabalho.

Conceitos do Git

Nomenclaturas básicas muito comuns na manipulação de códigos-fonte no GIT e no GitHub.

Repositório

Os repositórios são os ambientes criados para armazenar seus códigos.

Você pode possuir um ou mais repositórios, públicos ou privados, locais ou remotos, e eles podem armazenar não somente os próprios códigos a serem modificados, mas também imagens, áudios, arquivos e outros elementos relacionados ao seu projeto.

É através dos seus repositórios públicos que outros programadores poderão ter acesso aos seus códigos no GitHub, podendo, inclusive, cloná-los para adicionar melhorias.

Branch é o nome dado a uma versão (ramificação) do projeto. 
Isso é útil porque possibilita gerenciar múltiplas alterações acontecendo simultaneamente. Por exemplo, podemos fazer com que cada equipe de desenvolvimento

Merge

Para unir as modificações feitas em um branch ao código original. 

Com esta funcionalidade, todas as alterações feitas em cópias manipuláveis são inseridas, após aprovadas, no código-fonte original sem complicações.

Fork

Quando um profissional desenvolvedor precisa começar a trabalhar em um projeto, seu primeiro passo é copiar este repositório para a sua máquina.

Este processo é realizado pelo comando fork.

O fork também é uma funcionalidade útil quando um membro da equipe precisa pegar um código público para manuseá-lo em um editor de código local ou interno.

Principais comandos Git
•	Init: este comando dá origem a um repositório novo, local ou remoto, ou reinicializa um repositório já existente;
•	Clone: este comando clona o código de um repositório para sua manipulação em outro ambiente;
•	Commit: este comando move os arquivos da state area para um repositório local;
•	Add: este comando adiciona um arquivo alterado a uma staging area, ou seja, o prepara para ser vinculado a um commit;
•	Push: este comando envia arquivos de um repositório local para um repositório remoto. No GitHub, por exemplo;
•	Pull: ao contrário do push, este comando traz um arquivo do repositório remoto para o repositório local.
•	Merge: este comando serve para unir arquivos alterados ao arquivo original de um projeto. Em outras palavras, é ele quem une os branchs as commits.
•	Log: este comando permite a visualização do histórico de commits de um arquivo ou usuário, ou o acesso de uma versão específica.

GitHub

É uma plataforma totalmente online onde você pode criar repositórios e hospedar neles seus projetos, colaborar com softwares open source, seguir outros(as) programadores(as) e interagir com códigos de terceiros.

O GitHub armazena todos estes dados em uma nuvem e você pode acessá-los de onde estiver: basta logar-se no site em qualquer navegador.

Vantagem
•	Possibilidade de acompanhar e colaborar com projetos de diferentes equipes;
•	Aprender programação na prática ao observar o avanço do desenvolvimento de aplicações de terceiros;
•	Obter auxílio de outros programadores para resolver problemas relacionados a seus projetos;
•	Controlar as diferentes versões de um código com armazenamento em nuvem;
Registrar ações e projetos desenvolvidos por você em uma espécie de portfólio online, etc.
